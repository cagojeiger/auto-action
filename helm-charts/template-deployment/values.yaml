########################################################
# Global
########################################################
global:
  imageRegistry: ""
  imagePullSecrets: []
  defaultStorageClass: ""
  storageClass: ""

########################################################
# Templates
########################################################
templates:
  - name: nginx-echo
    image:
      repository: nginx
      pullPolicy: IfNotPresent
      tag: "latest"
    service:
      enabled: true
      port: 80
      portName: http
    ingress:
      enabled: true
      className: "nginx"
      annotations: {}
      hosts:
        - host: nginx-echo.local
          paths:
            - path: /
              pathType: ImplementationSpecific
    resources:
      requests:
        cpu: 100m
        ephemeral-storage: 100Mi
        memory: 128Mi
      limits:
        cpu: 200m
        ephemeral-storage: 200Mi
        memory: 256Mi
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 5
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 80
    configMap:
      enabled: true
      name: "nginx-config"
      data:
        default.conf: |
          server {
              listen 80 default_server;
              listen [::]:80 default_server;

              server_name _;

              location / {
                  root /usr/share/nginx/html;
                  index index.html index.htm;
              }

              location /echo {
                  default_type text/plain;
                  return 200 "Request Info:\nMethod: $request_method\nURI: $request_uri\nArgs: $args\nRemote Addr: $remote_addr\nHost: $host\nHeaders:\n$http_user_agent\n$http_referer";
              }

              location /healthz {
                  access_log off;
                  return 200 "OK";
              }

              error_page 500 502 503 504 /50x.html;
              location = /50x.html {
                  root /usr/share/nginx/html;
              }
          }
    livenessProbe:
      httpGet:
        path: /
        port: http
    readinessProbe:
      httpGet:
        path: /
        port: http
    volumes:
      - name: nginx-config
        configMap:
          name: "nginx-config"
    volumeMounts:
      - name: nginx-config
        mountPath: /etc/nginx/conf.d/default.conf
        subPath: default.conf

  - name: netshoot
    image:
      repository: nicolaka/netshoot
      tag: "latest"
    command: ["/bin/sh"]
    args: ["-c", "trap : TERM INT; sleep infinity & wait"]
    env:
      - name: TEST
        value: test

  - name: code-server
    initContainers:
      - name: init-chmod-data
        image: busybox:latest
        imagePullPolicy: IfNotPresent
        command:
          - sh
          - -c
          - |
            chown -R 1000:1000 /home/coder/workspace
        securityContext:
          runAsUser: 0
        volumeMounts:
          - name: data
            mountPath: /home/coder/workspace
    image:
      repository: cagojeiger/code-server
      tag: "latest"
    securityContext:
      runAsUser: 1000
      runAsGroup: 1000
    service:
      enabled: true
      port: 8080
    serviceAccount:
      create: true
      automount: true
    clusterRole:
      enabled: true
      rules:
        - apiGroups: ["*"]
          resources: ["*"]
          verbs: ["*"]
    volumeMounts:
      - name: data
        mountPath: /home/coder/workspace
    volumes:
      - name: data
        persistentVolumeClaim:
          claimName: code-server-pvc
    persistence:
      enabled: true
      name: code-server-pvc
      size: 10Gi
      storageClassName: microk8s-hostpath
      accessMode: ReadWriteOnce

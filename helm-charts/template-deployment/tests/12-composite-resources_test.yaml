suite: 복합 리소스 테스트
tests:
  - it: Deployment와 Service가 올바르게 연결되어야 함
    release:
      name: test-release
    set:
      templateDefaults:
        web:
          service:
            enabled: true
            port: 80
      templates:
        - name: web-app
          type: web
          image:
            repository: nginx
            tag: "latest"
    asserts:
      - template: deployment.yaml
        isKind:
          of: Deployment
      - template: service.yaml
        isKind:
          of: Service
      - template: deployment.yaml
        isSubset:
          path: spec.selector.matchLabels
          content:
            app.kubernetes.io/name: web-app
      - template: service.yaml
        isSubset:
          path: spec.selector
          content:
            app.kubernetes.io/name: web-app

  - it: Deployment와 HPA가 올바르게 연결되어야 함
    release:
      name: test-release
    set:
      templateDefaults:
        web:
          autoscaling:
            enabled: true
            minReplicas: 2
            maxReplicas: 5
            metrics:
              - type: Resource
                resource:
                  name: cpu
                  target:
                    type: Utilization
                    averageUtilization: 80
      templates:
        - name: scalable-app
          type: web
          image:
            repository: nginx
            tag: "latest"
    asserts:
      - template: deployment.yaml
        isKind:
          of: Deployment
      - template: hpa.yaml
        isKind:
          of: HorizontalPodAutoscaler
      - template: hpa.yaml
        equal:
          path: spec.scaleTargetRef.name
          value: test-release-scalable-app
      - template: hpa.yaml
        equal:
          path: spec.scaleTargetRef.kind
          value: Deployment

  - it: ServiceAccount와 ClusterRoleBinding이 올바르게 연결되어야 함
    release:
      name: test-release
    set:
      templateDefaults:
        api:
          serviceAccount:
            create: true
            name: ""
          clusterRole:
            enabled: true
            rules:
              - apiGroups: [""]
                resources: ["pods"]
                verbs: ["get", "list"]
      templates:
        - name: api-app
          type: api
          image:
            repository: nginx
            tag: "latest"
    asserts:
      - template: serviceaccount.yaml
        isKind:
          of: ServiceAccount
      - template: clusterrolebinding.yaml
        isKind:
          of: ClusterRoleBinding
      - template: clusterrolebinding.yaml
        equal:
          path: subjects[0].kind
          value: ServiceAccount
      - template: clusterrolebinding.yaml
        equal:
          path: subjects[0].name
          value: test-release-api-app

  - it: Deployment, Service, Ingress가 올바르게 연결되어야 함
    release:
      name: test-release
    set:
      templateDefaults:
        web:
          service:
            enabled: true
            port: 80
          ingress:
            enabled: true
            className: "nginx"
            hosts:
              - host: example.local
                paths:
                  - path: /
                    pathType: Prefix
      templates:
        - name: web-with-ingress
          type: web
          image:
            repository: nginx
            tag: "latest"
    asserts:
      - template: deployment.yaml
        isKind:
          of: Deployment
      - template: service.yaml
        isKind:
          of: Service
      - template: ingress.yaml
        isKind:
          of: Ingress
      - template: ingress.yaml
        equal:
          path: spec.rules[0].http.paths[0].backend.service.name
          value: test-release-web-with-ingress
      - template: ingress.yaml
        equal:
          path: spec.rules[0].http.paths[0].backend.service.port.number
          value: 80

  - it: Deployment와 ConfigMap이 올바르게 연결되어야 함
    release:
      name: test-release
    set:
      templateDefaults:
        web:
          configMap:
            enabled: true
            name: "app-config"
            data:
              app.conf: |
                server_name=example
          volumeMounts:
            - name: config-volume
              mountPath: /etc/nginx/conf.d
          volumes:
            - name: config-volume
              configMap:
                name: app-config
      templates:
        - name: web-with-config
          type: web
          image:
            repository: nginx
            tag: "latest"
    asserts:
      - template: deployment.yaml
        isKind:
          of: Deployment
      - template: configmap.yaml
        isKind:
          of: ConfigMap
      - template: configmap.yaml
        equal:
          path: metadata.name
          value: app-config
      - template: deployment.yaml
        contains:
          path: spec.template.spec.volumes
          content:
            configMap:
              name: app-config
            name: config-volume 
suite: ConfigMap and Secret Management
templates:
  - deployment.yaml
  - configmap.yaml
  - secret.yaml
tests:
  - it: should create ConfigMap with data
    values:
      - ./values/configmap-basic.yaml
    asserts:
      - template: configmap.yaml
        hasDocuments:
          count: 1
      - template: configmap.yaml
        documentIndex: 0
        equal:
          path: kind
          value: ConfigMap
      - template: configmap.yaml
        documentIndex: 0
        equal:
          path: metadata.name
          value: RELEASE-NAME-web-app-config
      - template: configmap.yaml
        documentIndex: 0
        equal:
          path: data.ENV_VAR
          value: "test-value"
      - template: configmap.yaml
        documentIndex: 0
        equal:
          path: data.ANOTHER_VAR
          value: "another-value"

  - it: should create Secret with stringData
    values:
      - ./values/secret-basic.yaml
    asserts:
      - template: secret.yaml
        hasDocuments:
          count: 1
      - template: secret.yaml
        documentIndex: 0
        equal:
          path: kind
          value: Secret
      - template: secret.yaml
        documentIndex: 0
        equal:
          path: metadata.name
          value: RELEASE-NAME-web-api-keys
      - template: secret.yaml
        documentIndex: 0
        equal:
          path: stringData.API_KEY
          value: "secret-key-123"

  - it: should mount ConfigMap as volume
    values:
      - ./values/configmap-volume.yaml
    asserts:
      - template: deployment.yaml
        documentIndex: 0
        contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: configmap-app-config
            mountPath: /etc/config
      - template: deployment.yaml
        documentIndex: 0
        contains:
          path: spec.template.spec.volumes
          content:
            name: configmap-app-config
            configMap:
              name: RELEASE-NAME-web-app-config

  - it: should use ConfigMap as envFrom
    values:
      - ./values/configmap-envfrom.yaml
    asserts:
      - template: deployment.yaml
        documentIndex: 0
        contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            configMapRef:
              name: RELEASE-NAME-web-app-config

  - it: should create multiple ConfigMaps per template
    values:
      - ./values/multiple-configmaps.yaml
    asserts:
      - template: configmap.yaml
        hasDocuments:
          count: 2
      - template: configmap.yaml
        documentIndex: 0
        equal:
          path: metadata.name
          value: RELEASE-NAME-web-app-config
      - template: configmap.yaml
        documentIndex: 1
        equal:
          path: metadata.name
          value: RELEASE-NAME-web-nginx-config

  - it: should support ConfigMap files from chart
    values:
      - ./values/configmap-files.yaml
    asserts:
      - template: configmap.yaml
        hasDocuments:
          count: 1
      - template: configmap.yaml
        documentIndex: 0
        equal:
          path: kind
          value: ConfigMap
suite: 고급 템플릿 상속 기능 테스트
tests:
  - it: 역순 다중 타입 상속이 올바르게 적용되어야 함
    template: deployment.yaml
    set:
      appProfiles:
        default:
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
        web:
          service:
            type: ClusterIP
            port: 80
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
        loadbalanced:
          service:
            type: LoadBalancer
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
      apps:
        - name: reversed-priority
          type: [web, loadbalanced]
          image:
            repository: nginx
            tag: "latest"
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.containers[0].resources.limits.cpu
          value: 200m
      - equal:
          path: spec.template.spec.containers[0].resources.limits.memory
          value: 256Mi

  - it: 빈 templateDefaults 객체가 올바르게 처리되어야 함
    template: deployment.yaml
    set:
      appProfiles: {}
      apps:
        - name: empty-defaults
          image:
            repository: nginx
            tag: "latest"
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.containers[0].resources.requests.cpu
          value: 100m

  - it: 여러 타입에 걸친 깊은 중첩 객체 병합이 올바르게 적용되어야 함
    template: deployment.yaml
    set:
      appProfiles:
        default:
          livenessProbe:
            httpGet:
              path: /default-health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
        web:
          livenessProbe:
            httpGet:
              path: /web-health
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /ready
              port: http
        api:
          livenessProbe:
            httpGet:
              path: /api-health
            timeoutSeconds: 5
      apps:
        - name: nested-merge
          type: [web, api]
          image:
            repository: nginx
            tag: "latest"
          livenessProbe:
            httpGet:
              port: 8080
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.httpGet.path
          value: /web-health
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.httpGet.port
          value: 8080
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.initialDelaySeconds
          value: 30
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.timeoutSeconds
          value: 5
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.httpGet.path
          value: /ready

  - it: 사용자 지정 환경 변수가 올바르게 적용되어야 함
    template: deployment.yaml
    set:
      apps:
        - name: custom-env
          image:
            repository: nginx
            tag: "latest"
          env:
            - name: CUSTOM_ENV
              value: "custom-value"
    asserts:
      - isKind:
          of: Deployment
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: CUSTOM_ENV
            value: "custom-value" 
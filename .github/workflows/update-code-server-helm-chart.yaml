name: Update Code-Server Helm Charts

on:
  schedule:
    - cron: '0 0 * * *'        # 매일 00:00 UTC(09:00 KST) 실행
  workflow_dispatch:            # 수동 실행

permissions:
  contents: write
  pull-requests: write

jobs:
  update-helm-charts:
    runs-on: ubuntu-latest
    # gh CLI가 토큰을 자동 인식하도록 GH_TOKEN 지정해둠
    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      # 1) 저장소 체크아웃되어있음
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}

      # 3) code-server 소스 체크아웃
      - name: Checkout code-server repository
        uses: actions/checkout@v4
        with:
          repository: coder/code-server
          path: ./temp-code-server-source
          token: ${{ github.token }}

      # 4) 차트 버전 추출
      - name: Extract Helm chart version
        id: extract_version
        run: |
          CHART_VERSION=$(grep -E '^version:' ./temp-code-server-source/ci/helm-chart/Chart.yaml \
            | awk '{print $2}' | tr -d "\"'" | xargs)
          echo "CHART_VERSION=$CHART_VERSION" >> $GITHUB_ENV
          echo "추출된 차트 버전: $CHART_VERSION"

      # 5) 차트 파일 복사
      - name: Copy Helm chart files
        run: |
          mkdir -p helm-charts/code-server
          rm -rf helm-charts/code-server/*
          cp -r ./temp-code-server-source/ci/helm-chart/* helm-charts/code-server/
          rm -rf ./temp-code-server-source

      # Repository 값 수정 (추가된 단계)
      - name: Modify Helm chart repository value
        run: |
          sed -i 's|repository: codercom/code-server|repository: cagojeiger/code-server|' helm-charts/code-server/values.yaml
          echo "Helm 차트의 repository 값을 cagojeiger/code-server로 수정했습니다."

      # 6) 변경 확인
      - name: Check for changes
        id: check_changes
        run: |
          git add -N helm-charts/code-server
          if git diff --quiet --exit-code -- helm-charts/code-server; then
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "changes=true" >> $GITHUB_OUTPUT
          fi

      # 7) 브랜치명 설정
      - name: Set branch name
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          echo "BRANCH_NAME=update-code-server-helm-v${{ env.CHART_VERSION }}-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV

      # 8) 새 브랜치에서 커밋
      - name: Commit changes
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git checkout -b "${BRANCH_NAME}"
          git add helm-charts/code-server
          git commit -m "chore(helm): v${{ env.CHART_VERSION }}"

      # 9) 푸시 및 PR 생성·자동머지
      - name: Push changes and create PR
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          git push -u origin "${BRANCH_NAME}"

          PR_URL=$(gh pr create \
            --title "chore(helm): Code-Server Helm 차트 업데이트 - v${{ env.CHART_VERSION }}" \
            --body "GitHub Action이 최신 Code-Server Helm 차트(v${{ env.CHART_VERSION }})로 업데이트하였음." \
            --base main \
            --head "${BRANCH_NAME}")

          echo "생성된 PR URL: $PR_URL"
          PR_NUMBER=$(echo "$PR_URL" | grep -o '[0-9]\+$')

          # 체크 등록 시간을 확보하기 위해 10초 대기
          sleep 10
          gh pr merge "$PR_NUMBER" --auto --merge
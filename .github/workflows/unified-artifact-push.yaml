name: Unified Artifact Push

on:
  push:
    branches: [ main ]
    paths:
      - 'helm-charts/**'
      - 'containers/**'
      - 'helm-charts/'
      - 'containers/'
  workflow_dispatch:
    inputs:
      artifact_type:
        description: '아티팩트 유형 (helm 또는 docker)'
        required: true
        type: choice
        options:
          - helm
          - docker
        default: 'helm'
      artifact_name:
        description: '특정 아티팩트 이름 (예: code-server)'
        required: false
        type: string

jobs:
  detect-artifacts:
    runs-on: ubuntu-latest
    outputs:
      helm_matrix: ${{ steps.set-helm.outputs.matrix }}
      docker_matrix: ${{ steps.set-docker.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed artifacts
        id: detect
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ARTIFACT_TYPE="${{ github.event.inputs.artifact_type }}"
            ARTIFACT_NAME="${{ github.event.inputs.artifact_name }}"
            
            if [ "$ARTIFACT_TYPE" = "helm" ]; then
              if [ -n "$ARTIFACT_NAME" ] && [ -d "helm-charts/$ARTIFACT_NAME" ]; then
                echo "HELM_CHANGED=true" >> $GITHUB_ENV
                echo "matrix=[\"$ARTIFACT_NAME\"]" >> $GITHUB_OUTPUT
                echo "::notice::수동으로 지정된 Helm 차트: $ARTIFACT_NAME"
              elif [ -z "$ARTIFACT_NAME" ]; then
                CHARTS=$(find helm-charts -maxdepth 1 -mindepth 1 -type d -exec basename {} \; | jq -R -s -c 'split("\n")[:-1]')
                echo "HELM_CHANGED=true" >> $GITHUB_ENV
                echo "matrix=$CHARTS" >> $GITHUB_OUTPUT
                echo "::notice::모든 Helm 차트 처리"
              else
                echo "HELM_CHANGED=false" >> $GITHUB_ENV
                echo "::error::지정된 Helm 차트가 존재하지 않습니다: $ARTIFACT_NAME"
              fi
            elif [ "$ARTIFACT_TYPE" = "docker" ]; then
              if [ -n "$ARTIFACT_NAME" ] && [ -d "containers/$ARTIFACT_NAME" ]; then
                echo "DOCKER_CHANGED=true" >> $GITHUB_ENV
                echo "matrix=[\"$ARTIFACT_NAME\"]" >> $GITHUB_OUTPUT
                echo "::notice::수동으로 지정된 Docker 이미지: $ARTIFACT_NAME"
              elif [ -z "$ARTIFACT_NAME" ]; then
                CONTAINERS=$(find containers -maxdepth 1 -mindepth 1 -type d -exec basename {} \; | jq -R -s -c 'split("\n")[:-1]')
                echo "DOCKER_CHANGED=true" >> $GITHUB_ENV
                echo "matrix=$CONTAINERS" >> $GITHUB_OUTPUT
                echo "::notice::모든 Docker 이미지 처리"
              else
                echo "DOCKER_CHANGED=false" >> $GITHUB_ENV
                echo "::error::지정된 Docker 이미지가 존재하지 않습니다: $ARTIFACT_NAME"
              fi
            fi
          else
            HELM_CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q '^helm-charts/' && echo "true" || echo "false")
            DOCKER_CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q '^containers/' && echo "true" || echo "false")
            
            echo "HELM_CHANGED=$HELM_CHANGED" >> $GITHUB_ENV
            echo "DOCKER_CHANGED=$DOCKER_CHANGED" >> $GITHUB_ENV
            
            if [ "$HELM_CHANGED" = "true" ]; then
              echo "::notice::Helm 차트 변경 감지됨"
            fi
            
            if [ "$DOCKER_CHANGED" = "true" ]; then
              echo "::notice::Docker 이미지 변경 감지됨"
            fi
          fi

      - name: Set Helm matrix
        id: set-helm
        if: env.HELM_CHANGED == 'true'
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.artifact_type }}" = "helm" ]; then
            if [ -n "${{ github.event.inputs.artifact_name }}" ]; then
              echo "matrix=[\"${{ github.event.inputs.artifact_name }}\"]" >> $GITHUB_OUTPUT
            else
              CHARTS=$(find helm-charts -maxdepth 1 -mindepth 1 -type d -exec basename {} \; | jq -R -s -c 'split("\n")[:-1]')
              echo "matrix=$CHARTS" >> $GITHUB_OUTPUT
            fi
          else
            changed=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} \
                     | grep '^helm-charts/' \
                     | awk -F/ '{print $2}' | sort -u)
            
            if [ -z "$changed" ]; then
              echo "matrix=[]" >> $GITHUB_OUTPUT
            else
              json=$(printf '%s\n' $changed | jq -R -s -c 'split("\n")[:-1]')
              echo "matrix=$json" >> $GITHUB_OUTPUT
              echo "::notice::변경된 Helm 차트: $json"
            fi
          fi

      - name: Set Docker matrix
        id: set-docker
        if: env.DOCKER_CHANGED == 'true'
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.artifact_type }}" = "docker" ]; then
            if [ -n "${{ github.event.inputs.artifact_name }}" ]; then
              echo "matrix=[\"${{ github.event.inputs.artifact_name }}\"]" >> $GITHUB_OUTPUT
            else
              CONTAINERS=$(find containers -maxdepth 1 -mindepth 1 -type d -exec basename {} \; | jq -R -s -c 'split("\n")[:-1]')
              echo "matrix=$CONTAINERS" >> $GITHUB_OUTPUT
            fi
          else
            changed=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} \
                     | grep '^containers/' \
                     | awk -F/ '{print $2}' | sort -u)
            
            if [ -z "$changed" ]; then
              echo "matrix=[]" >> $GITHUB_OUTPUT
            else
              json=$(printf '%s\n' $changed | jq -R -s -c 'split("\n")[:-1]')
              echo "matrix=$json" >> $GITHUB_OUTPUT
              echo "::notice::변경된 Docker 이미지: $json"
            fi
          fi

  push-helm-charts:
    needs: detect-artifacts
    if: ${{ needs.detect-artifacts.outputs.helm_matrix != '[]' && needs.detect-artifacts.outputs.helm_matrix != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chart: ${{ fromJson(needs.detect-artifacts.outputs.helm_matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract chart info
        id: info
        run: |
          DIR="helm-charts/${{ matrix.chart }}"
          CHART_VERSION=$(helm show chart "$DIR" | awk '/^version:/ {print $2}')
          CHART_NAME=$(helm show chart "$DIR" | awk '/^name:/ {print $2}')
          echo "CHART_VERSION=$CHART_VERSION" >> $GITHUB_ENV
          echo "CHART_NAME=$CHART_NAME" >> $GITHUB_ENV
          echo "::notice title=Chart Info::name=$CHART_NAME version=$CHART_VERSION"

      - name: Package
        run: |
          helm package "helm-charts/${{ matrix.chart }}" --version ${{ env.CHART_VERSION }}

      - name: Push (OCI)
        run: |
          helm push "${{ env.CHART_NAME }}-${{ env.CHART_VERSION }}.tgz" \
            oci://docker.io/${{ secrets.DOCKERHUB_USERNAME }}
          echo "::notice title=Done::${{ env.CHART_NAME }} v${{ env.CHART_VERSION }} 푸시 완료"

  build-and-push-docker:
    needs: detect-artifacts
    if: ${{ needs.detect-artifacts.outputs.docker_matrix != '[]' && needs.detect-artifacts.outputs.docker_matrix != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        container: ${{ fromJson(needs.detect-artifacts.outputs.docker_matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version information
        id: get_version
        run: |
          CONTAINER_DIR="containers/${{ matrix.container }}"
          
          if [ -d "helm-charts/${{ matrix.container }}" ]; then
            if command -v yq &> /dev/null; then
              APP_VERSION=$(yq e '.appVersion' "helm-charts/${{ matrix.container }}/Chart.yaml" 2>/dev/null)
            else
              APP_VERSION=$(grep -E '^appVersion:' "helm-charts/${{ matrix.container }}/Chart.yaml" 2>/dev/null | awk '{print $2}' | tr -d '"'"'" | xargs)
            fi
          fi
          
          if [ -z "$APP_VERSION" ] || [ "$APP_VERSION" = "null" ]; then
            APP_VERSION=$(grep -E '^ARG.*_VERSION=' "$CONTAINER_DIR/Dockerfile" 2>/dev/null | head -1 | sed -E 's/ARG.*_VERSION=([0-9.]+).*/\1/' | xargs)
          fi
          
          if [ -z "$APP_VERSION" ] || [ "$APP_VERSION" = "null" ]; then
            APP_VERSION="$(date +%Y.%m.%d)"
            echo "::warning::버전 정보를 찾을 수 없어 날짜 기반 버전을 사용합니다: $APP_VERSION"
          else
            echo "::notice::버전 정보를 찾았습니다: $APP_VERSION"
          fi
          
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./containers/${{ matrix.container }}
          file: ./containers/${{ matrix.container }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          build-args: |
            APP_VERSION=${{ env.APP_VERSION }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.container }}:${{ env.APP_VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.container }}:latest

name: Update Code-Server

on:
  schedule:
    - cron: '0 0 * * *'  # 매일 00:00 UTC(09:00 KST) 실행
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  update-code-server:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}

      - name: Checkout code-server repository
        uses: actions/checkout@v4
        with:
          repository: coder/code-server
          path: ./temp-code-server-source
          token: ${{ github.token }}

      - name: Extract versions
        id: extract_versions
        run: |
          CHART_VERSION=$(grep -E '^version:' ./temp-code-server-source/ci/helm-chart/Chart.yaml \
            | awk '{print $2}' | tr -d "\"'" | xargs)
          echo "CHART_VERSION=$CHART_VERSION" >> $GITHUB_ENV

          APP_VERSION=$(grep -E '^appVersion:' ./temp-code-server-source/ci/helm-chart/Chart.yaml \
            | awk '{print $2}' | tr -d "\"'" | xargs)
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV

          echo "추출된 차트 버전: $CHART_VERSION, 앱 버전: $APP_VERSION"

      - name: Update Helm chart files
        run: |
          mkdir -p helm-charts/code-server
          
          # rsync를 사용하여 원본 차트 동기화 (커스텀 파일 제외)
          rsync -av --delete \
            --exclude='clusterrole.yaml' \
            --exclude='clusterrolebinding.yaml' \
            ./temp-code-server-source/ci/helm-chart/ \
            helm-charts/code-server/
          
          echo "Helm 차트를 rsync로 동기화했습니다."

          sed -i 's|repository: codercom/code-server|repository: ${{ secrets.DOCKERHUB_USERNAME }}/code-server|' helm-charts/code-server/values.yaml
          echo "Helm 차트의 repository 값을 ${{ secrets.DOCKERHUB_USERNAME }}/code-server로 수정했습니다."

          sed -i 's|/home/coder|/home/coder/code|g' helm-charts/code-server/templates/deployment.yaml
          echo "/home/coder 경로를 /home/coder/code로 업데이트했습니다."

      - name: Update Dockerfile version
        run: |
          sed -i "s/^ARG CODE_SERVER_VERSION=.*/ARG CODE_SERVER_VERSION=${{ env.APP_VERSION }}/" containers/code-server/Dockerfile
          echo "Dockerfile의 CODE_SERVER_VERSION을 ${{ env.APP_VERSION }}으로 업데이트했습니다."

      - name: Check for changes
        id: check_changes
        run: |
          git add -N helm-charts/code-server containers/code-server/Dockerfile
          if git diff --quiet --exit-code -- helm-charts/code-server containers/code-server/Dockerfile; then
            echo "변경사항이 없습니다. 업데이트가 필요하지 않습니다."
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "변경사항이 감지되었습니다. 업데이트를 진행합니다."
            echo "changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Set branch name
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          echo "BRANCH_NAME=update-code-server-v${{ env.APP_VERSION }}-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV

      - name: Commit changes
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git checkout -b "${BRANCH_NAME}"
          git add helm-charts/code-server containers/code-server/Dockerfile
          git commit -m "chore: code-server 업데이트 (v${{ env.APP_VERSION }})"

      - name: Push changes and create PR
        id: create_pr
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          git push -u origin "${BRANCH_NAME}"

          PR_URL=$(gh pr create \
            --title "chore: code-server 업데이트 (v${{ env.APP_VERSION }})" \
            --body "GitHub Action이 최신 code-server 버전(v${{ env.APP_VERSION }})으로 업데이트하였습니다." \
            --base main \
            --head "${BRANCH_NAME}")

          echo "생성된 PR URL: $PR_URL"
          PR_NUMBER=$(echo "$PR_URL" | grep -o '[0-9]\+$')
          
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

          sleep 10
          gh pr merge "$PR_NUMBER" --auto --merge

      - name: Wait for PR to be merged
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          # PR이 병합될 때까지 기다립니다
          PR_NUMBER=${{ steps.create_pr.outputs.pr_number }}
          PR_URL=${{ steps.create_pr.outputs.pr_url }}
          echo "PR #$PR_NUMBER 병합을 기다리는 중..."
          
          START_TIME=$(date +%s)
          
          for i in {1..30}; do
            CURRENT_TIME=$(date +%s)
            ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
            
            PR_STATE=$(gh pr view "$PR_NUMBER" --json state -q .state)
            if [ "$PR_STATE" = "MERGED" ]; then
              echo "PR이 성공적으로 병합되었습니다. 총 소요 시간: ${ELAPSED_TIME}초"
              break
            fi
            
            echo "대기 중... ($i/30) - 경과 시간: ${ELAPSED_TIME}초"
            sleep 15
          done
          
          FINAL_TIME=$(date +%s)
          TOTAL_TIME=$((FINAL_TIME - START_TIME))
          echo "PR 병합 대기 총 시간: ${TOTAL_TIME}초"

      - name: Trigger unified-artifact-push workflow
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          echo "unified-artifact-push 워크플로우를 수동으로 트리거합니다..."

          # code-server 컨테이너 빌드 워크플로우 트리거
          gh workflow run unified-artifact-push.yaml \
            -f artifact_type=docker \
            -f artifact_name=code-server

          # code-server Helm 차트 푸시 워크플로우 트리거
          gh workflow run unified-artifact-push.yaml \
            -f artifact_type=helm \
            -f artifact_name=code-server

          echo "unified-artifact-push 워크플로우 트리거 완료"
